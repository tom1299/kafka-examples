/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
    id 'io.freefair.lombok' version '5.1.0'
}

version = '1.0'

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
	// https://mvnrepository.com/artifact/org.apache.kafka/kafka-streams
    implementation group: 'org.apache.kafka', name: 'kafka-streams', version: '2.5.0'
	// https://mvnrepository.com/artifact/org.projectlombok/lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.12'
    runtimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation group: 'org.apache.kafka', name: 'kafka-streams-test-utils', version: '2.5.0'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

application {
    // Define the main class for the application.
    mainClassName = 'com.tom.kafka.examples.account.service.App'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
	manifest {
        attributes 'Implementation-Title': 'AccountService',
        	'Implementation-Version': archiveVersion,
        	'Main-Class': 'com.tom.kafka.streams.example4.AccountProcessor'
    }
    archiveBaseName = project.name + '-all'
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

fatJar.mustRunAfter jar