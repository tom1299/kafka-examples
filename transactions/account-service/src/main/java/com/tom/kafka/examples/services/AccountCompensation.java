/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.tom.kafka.examples.services;

import com.tom.kafka.examples.KafkaUtils;
import com.tom.kafka.examples.model.AccountEvent;
import com.tom.kafka.examples.model.OrderEvent;
import com.tom.kafka.examples.model.StockEvent;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.Topology;
import org.apache.kafka.streams.kstream.*;

import java.time.Duration;

@Slf4j
public class AccountCompensation extends AbstractKafkaApp {

    protected Topology addTopology() {
        StreamsBuilder builder = new StreamsBuilder();

        KStream<String, StockEvent> stockStream = builder.stream("processed-stock-transactions", Consumed.with(KafkaUtils.keySerde,
                KafkaUtils.getSerde(StockEvent.class)));

        KStream<String, AccountEvent> accountStream = builder.stream("processed-account-transactions", Consumed.with(KafkaUtils.keySerde,
                KafkaUtils.getSerde(AccountEvent.class)));

        KStream<String, AccountEvent> accountAndStockJoined = stockStream.join(accountStream,
                (stockEvent, accountEvent) -> {
                    log.info("Evaluating stock {} and account {} events for compensation", stockEvent, accountEvent);
                    if (stockEvent.getStatus() == StockEvent.Status.REJECTED && accountEvent.getStatus() == AccountEvent.Status.FULFILLED) {
                        log.info("Created account compensation for stock event {} and transaction {}", accountEvent.getId(), accountEvent.getTransactionId());
                        accountEvent.setStatus(AccountEvent.Status.COMPENSATION);
                    }
                    return accountEvent;
                },
                JoinWindows.of(Duration.ofMinutes(5)),
                StreamJoined.with(
                        Serdes.String(), /* key */
                        KafkaUtils.getSerde(StockEvent.class),   /* left value */
                        KafkaUtils.getSerde(AccountEvent.class))  /* right value */
        );

        accountAndStockJoined.filter((key, accountEvent) -> accountEvent.getStatus() == AccountEvent.Status.COMPENSATION)
                .selectKey((key, accountEvent) -> accountEvent.getAccountNumber())
                .to("account-transactions", Produced.with(KafkaUtils.keySerde, KafkaUtils.getSerde(AccountEvent.class)));
        return builder.build();
    }

    public static void main(String[] args) {
        AccountCompensation app = new AccountCompensation();
        app.run();
    }
}
