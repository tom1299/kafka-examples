/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.tom.kafka.examples.services;

import com.tom.kafka.examples.KafkaUtils;
import com.tom.kafka.examples.model.AccountEvent;
import com.tom.kafka.examples.model.OrderEvent;
import com.tom.kafka.examples.model.StockEvent;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.kstream.*;

import java.time.Duration;

@Slf4j
public class OrderFinalizer extends AbstractKafkaApp {


    protected void addTopology(StreamsBuilder builder) {
        Initializer<Long> initializer = () -> 0L;

        KStream<String, StockEvent> stockStream = builder.stream("processed-stock-transactions", Consumed.with(KafkaUtils.keySerde,
                KafkaUtils.getSerde(StockEvent.class)));

        KStream<String, AccountEvent> accountStream = builder.stream("processed-account-transactions", Consumed.with(KafkaUtils.keySerde,
                KafkaUtils.getSerde(AccountEvent.class)));

        KStream<String, OrderEvent> pendingOrders = builder.stream("pending-transactions", Consumed.with(KafkaUtils.keySerde,
                KafkaUtils.getSerde(OrderEvent.class)));

        // TODO: Implement three way join.
    }
}
