/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.tom.kafka.examples.account.service;

import com.tom.kafka.examples.account.service.model.AccountEvent;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.Topology;
import org.apache.kafka.streams.errors.LogAndContinueExceptionHandler;
import org.apache.kafka.streams.kstream.*;
import org.apache.kafka.streams.state.Stores;

import java.util.Properties;
import java.util.concurrent.CountDownLatch;

@Slf4j
public class AccountService {

    private CountDownLatch latch = new CountDownLatch(1);

    private StreamsBuilder builder;

    public AccountService() {
        super();
        builder = new StreamsBuilder();
    }

    public AccountService(StreamsBuilder builder) {
        this.builder = builder;
    }

    public void run() {
        Properties props = new Properties();
        KafkaUtils.addBootstrapServer(props);

        props.put(StreamsConfig.DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER_CLASS_CONFIG, LogAndContinueExceptionHandler.class);
        props.put(StreamsConfig.APPLICATION_ID_CONFIG, AccountService.class.getName());

        addTopology();
        final Topology topology = builder.build();
        System.out.println(topology.describe());

        final KafkaStreams streams = new KafkaStreams(topology, props);

        KafkaUtils.addShutdownHook(streams, latch, "AccountService");

        start(streams);
    }

    private Long aggregate(String account, AccountEvent accountEvent,
                           Long currentBalance) {
        log.debug("Processing account event {}", accountEvent);
        long newBalance = 0l;
        if (accountEvent.getType() == AccountEvent.Type.DEPOSIT) {
            newBalance = handleDeposit(accountEvent, currentBalance);
        }
        else if (accountEvent.getType() == AccountEvent.Type.WITHDRAW.WITHDRAW) {
            newBalance = handleWithdraw(accountEvent, currentBalance);
        }
        return newBalance;
    }

    private long handleWithdraw(AccountEvent accountEvent, Long currentBalance) {
        long newBalance = currentBalance;
        if (currentBalance - accountEvent.getAmount() < 0) {
            log.debug("Insufficient balance of {} on user account {} to withdraw amount {}", currentBalance, accountEvent.getUserId(), accountEvent.getAmount());
            accountEvent.setStatus(AccountEvent.Status.REJECTED);
        }
        else {
            newBalance = currentBalance - accountEvent.getAmount();
            log.debug("Withdrew {} from user account {}. New balance is {}", accountEvent.getAmount(), accountEvent.getUserId(), newBalance);
        }
        return newBalance;
    }

    private long handleDeposit(AccountEvent accountEvent, Long currentBalance) {
        accountEvent.setStatus(AccountEvent.Status.FULFILLED);
        long newBalanace = currentBalance + accountEvent.getAmount();
        log.debug("Added {} to user account {}. New balance is {}", accountEvent.getAmount(), accountEvent.getUserId(), newBalanace);
        return newBalanace;
    }

    void addTopology() {
        Initializer<Long> initializer = () -> 0l;

        Aggregator<String, AccountEvent, Long> aggregator = (String account, AccountEvent accountEvent,
                                                            Long currentBalance) -> aggregate(account, accountEvent, currentBalance);

        KStream<String, AccountEvent> stream = builder.stream("account-events", Consumed.with(KafkaUtils.keySerde,
                KafkaUtils.accountEventSerde));

        stream.groupByKey().aggregate(initializer, aggregator, Materialized
                .<String, Long>as(Stores.inMemoryKeyValueStore("accounts")).withCachingDisabled()
                .withKeySerde(Serdes.String()).withValueSerde(Serdes.Long()));
        stream.selectKey((key, accountEvent) -> accountEvent.getId()).to("processed-account-events", Produced.with(KafkaUtils.keySerde,
                KafkaUtils.accountEventSerde));
    }

    private void start(KafkaStreams streams) {
        try {
            streams.start();
            latch.await();
        } catch (Throwable e) {
            System.exit(1);
        }
        System.exit(0);
    }

    public static void main(String[] args) {
        AccountService accountService = new AccountService();
        accountService.run();
    }
}
